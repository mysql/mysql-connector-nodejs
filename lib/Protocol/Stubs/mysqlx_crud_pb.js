/*
 * Copyright (c) 2017, 2022, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0, as
 * published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms,
 * as designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an
 * additional permission to link the program and your derivative works
 * with the separately licensed software that they have included with
 * MySQL.
 *
 * Without limiting anything contained in the foregoing, this file,
 * which is part of MySQL Connector/Node.js, is also subject to the
 * Universal FOSS Exception, version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

// source: mysqlx_crud.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mysqlx_pb = require('./mysqlx_pb.js');
goog.object.extend(proto, mysqlx_pb);
var mysqlx_expr_pb = require('./mysqlx_expr_pb.js');
goog.object.extend(proto, mysqlx_expr_pb);
var mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');
goog.object.extend(proto, mysqlx_datatypes_pb);
goog.exportSymbol('proto.Mysqlx.Crud.Collection', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Column', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.CreateView', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.DataModel', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Delete', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.DropView', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Find', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Find.RowLock', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Find.RowLockOptions', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Insert', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Insert.TypedRow', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Limit', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.LimitExpr', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.ModifyView', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Order', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Order.Direction', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Projection', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.Update', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.UpdateOperation.UpdateType', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.ViewAlgorithm', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.ViewCheckOption', null, global);
goog.exportSymbol('proto.Mysqlx.Crud.ViewSqlSecurity', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Column.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Column.displayName = 'proto.Mysqlx.Crud.Column';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Projection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.Projection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Projection.displayName = 'proto.Mysqlx.Crud.Projection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Collection.displayName = 'proto.Mysqlx.Crud.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Limit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.Limit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Limit.displayName = 'proto.Mysqlx.Crud.Limit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.LimitExpr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.LimitExpr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.LimitExpr.displayName = 'proto.Mysqlx.Crud.LimitExpr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Order.displayName = 'proto.Mysqlx.Crud.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.UpdateOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.UpdateOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.UpdateOperation.displayName = 'proto.Mysqlx.Crud.UpdateOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Find = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Find.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Find, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Find.displayName = 'proto.Mysqlx.Crud.Find';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Insert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Insert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Insert.displayName = 'proto.Mysqlx.Crud.Insert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Insert.TypedRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Insert.TypedRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Insert.TypedRow.displayName = 'proto.Mysqlx.Crud.Insert.TypedRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Update.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Update.displayName = 'proto.Mysqlx.Crud.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.Delete.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.Delete.displayName = 'proto.Mysqlx.Crud.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.CreateView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.CreateView.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.CreateView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.CreateView.displayName = 'proto.Mysqlx.Crud.CreateView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.ModifyView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Crud.ModifyView.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Crud.ModifyView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.ModifyView.displayName = 'proto.Mysqlx.Crud.ModifyView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Crud.DropView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Crud.DropView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Crud.DropView.displayName = 'proto.Mysqlx.Crud.DropView';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Column.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    alias: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    documentPathList: jspb.Message.toObjectList(msg.getDocumentPathList(),
    mysqlx_expr_pb.DocumentPathItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Column}
 */
proto.Mysqlx.Crud.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Column;
  return proto.Mysqlx.Crud.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Column}
 */
proto.Mysqlx.Crud.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 3:
      var value = new mysqlx_expr_pb.DocumentPathItem;
      reader.readMessage(value,mysqlx_expr_pb.DocumentPathItem.deserializeBinaryFromReader);
      msg.addDocumentPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDocumentPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      mysqlx_expr_pb.DocumentPathItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Mysqlx.Crud.Column.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Column} returns this
 */
proto.Mysqlx.Crud.Column.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Column} returns this
 */
proto.Mysqlx.Crud.Column.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Column.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.Column.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Column} returns this
 */
proto.Mysqlx.Crud.Column.prototype.setAlias = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Column} returns this
 */
proto.Mysqlx.Crud.Column.prototype.clearAlias = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Column.prototype.hasAlias = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Mysqlx.Expr.DocumentPathItem document_path = 3;
 * @return {!Array<!proto.Mysqlx.Expr.DocumentPathItem>}
 */
proto.Mysqlx.Crud.Column.prototype.getDocumentPathList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.DocumentPathItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.DocumentPathItem, 3));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.DocumentPathItem>} value
 * @return {!proto.Mysqlx.Crud.Column} returns this
*/
proto.Mysqlx.Crud.Column.prototype.setDocumentPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Mysqlx.Expr.DocumentPathItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.DocumentPathItem}
 */
proto.Mysqlx.Crud.Column.prototype.addDocumentPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Expr.DocumentPathItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Column} returns this
 */
proto.Mysqlx.Crud.Column.prototype.clearDocumentPathList = function() {
  return this.setDocumentPathList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Projection.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Projection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Projection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Projection.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    alias: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Projection}
 */
proto.Mysqlx.Crud.Projection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Projection;
  return proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Projection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Projection}
 */
proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Projection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Projection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Projection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Projection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required Mysqlx.Expr.Expr source = 1;
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Projection.prototype.getSource = function() {
  return /** @type{!proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Expr} value
 * @return {!proto.Mysqlx.Crud.Projection} returns this
*/
proto.Mysqlx.Crud.Projection.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Projection} returns this
 */
proto.Mysqlx.Crud.Projection.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Projection.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.Projection.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Projection} returns this
 */
proto.Mysqlx.Crud.Projection.prototype.setAlias = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Projection} returns this
 */
proto.Mysqlx.Crud.Projection.prototype.clearAlias = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Projection.prototype.hasAlias = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    schema: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Collection;
  return proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Mysqlx.Crud.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Collection} returns this
 */
proto.Mysqlx.Crud.Collection.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Collection} returns this
 */
proto.Mysqlx.Crud.Collection.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Collection.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string schema = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.Collection.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Collection} returns this
 */
proto.Mysqlx.Crud.Collection.prototype.setSchema = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Collection} returns this
 */
proto.Mysqlx.Crud.Collection.prototype.clearSchema = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Collection.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Limit.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Limit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Limit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Limit.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    offset: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Limit}
 */
proto.Mysqlx.Crud.Limit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Limit;
  return proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Limit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Limit}
 */
proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRowCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Limit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Limit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Limit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Limit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * required uint64 row_count = 1;
 * @return {string}
 */
proto.Mysqlx.Crud.Limit.prototype.getRowCount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Limit} returns this
 */
proto.Mysqlx.Crud.Limit.prototype.setRowCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Limit} returns this
 */
proto.Mysqlx.Crud.Limit.prototype.clearRowCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Limit.prototype.hasRowCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 offset = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.Limit.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.Limit} returns this
 */
proto.Mysqlx.Crud.Limit.prototype.setOffset = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Limit} returns this
 */
proto.Mysqlx.Crud.Limit.prototype.clearOffset = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Limit.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.LimitExpr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.LimitExpr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.LimitExpr.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowCount: (f = msg.getRowCount()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    offset: (f = msg.getOffset()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.LimitExpr}
 */
proto.Mysqlx.Crud.LimitExpr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.LimitExpr;
  return proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.LimitExpr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.LimitExpr}
 */
proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setRowCount(value);
      break;
    case 2:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.LimitExpr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowCount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * required Mysqlx.Expr.Expr row_count = 1;
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.getRowCount = function() {
  return /** @type{!proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Expr} value
 * @return {!proto.Mysqlx.Crud.LimitExpr} returns this
*/
proto.Mysqlx.Crud.LimitExpr.prototype.setRowCount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.LimitExpr} returns this
 */
proto.Mysqlx.Crud.LimitExpr.prototype.clearRowCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.hasRowCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Mysqlx.Expr.Expr offset = 2;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.getOffset = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 2));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.LimitExpr} returns this
*/
proto.Mysqlx.Crud.LimitExpr.prototype.setOffset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.LimitExpr} returns this
 */
proto.Mysqlx.Crud.LimitExpr.prototype.clearOffset = function() {
  return this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.LimitExpr.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    expr: (f = msg.getExpr()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Order}
 */
proto.Mysqlx.Crud.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Order;
  return proto.Mysqlx.Crud.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Order}
 */
proto.Mysqlx.Crud.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setExpr(value);
      break;
    case 2:
      var value = /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Mysqlx.Crud.Order.Direction = {
  ASC: 1,
  DESC: 2
};

/**
 * required Mysqlx.Expr.Expr expr = 1;
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Order.prototype.getExpr = function() {
  return /** @type{!proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Expr} value
 * @return {!proto.Mysqlx.Crud.Order} returns this
*/
proto.Mysqlx.Crud.Order.prototype.setExpr = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Order} returns this
 */
proto.Mysqlx.Crud.Order.prototype.clearExpr = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Order.prototype.hasExpr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Direction direction = 2;
 * @return {!proto.Mysqlx.Crud.Order.Direction}
 */
proto.Mysqlx.Crud.Order.prototype.getDirection = function() {
  return /** @type {!proto.Mysqlx.Crud.Order.Direction} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Order.Direction} value
 * @return {!proto.Mysqlx.Crud.Order} returns this
 */
proto.Mysqlx.Crud.Order.prototype.setDirection = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Order} returns this
 */
proto.Mysqlx.Crud.Order.prototype.clearDirection = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Order.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.UpdateOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.UpdateOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && mysqlx_expr_pb.ColumnIdentifier.toObject(includeInstance, f),
    operation: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    value: (f = msg.getValue()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.UpdateOperation}
 */
proto.Mysqlx.Crud.UpdateOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.UpdateOperation;
  return proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.UpdateOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.UpdateOperation}
 */
proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mysqlx_expr_pb.ColumnIdentifier;
      reader.readMessage(value,mysqlx_expr_pb.ColumnIdentifier.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 3:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.UpdateOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mysqlx_expr_pb.ColumnIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Mysqlx.Crud.UpdateOperation.UpdateType = {
  SET: 1,
  ITEM_REMOVE: 2,
  ITEM_SET: 3,
  ITEM_REPLACE: 4,
  ITEM_MERGE: 5,
  ARRAY_INSERT: 6,
  ARRAY_APPEND: 7,
  MERGE_PATCH: 8
};

/**
 * required Mysqlx.Expr.ColumnIdentifier source = 1;
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.getSource = function() {
  return /** @type{!proto.Mysqlx.Expr.ColumnIdentifier} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.ColumnIdentifier, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.ColumnIdentifier} value
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
*/
proto.Mysqlx.Crud.UpdateOperation.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UpdateType operation = 2;
 * @return {!proto.Mysqlx.Crud.UpdateOperation.UpdateType}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.getOperation = function() {
  return /** @type {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.UpdateOperation.UpdateType} value
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.setOperation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.clearOperation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Mysqlx.Expr.Expr value = 3;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.getValue = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
*/
proto.Mysqlx.Crud.UpdateOperation.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.UpdateOperation} returns this
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.UpdateOperation.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Find.repeatedFields_ = [4,11,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Find.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Find.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Find} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Find.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    dataModel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    projectionList: jspb.Message.toObjectList(msg.getProjectionList(),
    proto.Mysqlx.Crud.Projection.toObject, includeInstance),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),
    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.Mysqlx.Crud.Order.toObject, includeInstance),
    groupingList: jspb.Message.toObjectList(msg.getGroupingList(),
    mysqlx_expr_pb.Expr.toObject, includeInstance),
    groupingCriteria: (f = msg.getGroupingCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    locking: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    lockingOptions: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Find}
 */
proto.Mysqlx.Crud.Find.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Find;
  return proto.Mysqlx.Crud.Find.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Find} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Find}
 */
proto.Mysqlx.Crud.Find.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 4:
      var value = new proto.Mysqlx.Crud.Projection;
      reader.readMessage(value,proto.Mysqlx.Crud.Projection.deserializeBinaryFromReader);
      msg.addProjection(value);
      break;
    case 11:
      var value = new mysqlx_datatypes_pb.Scalar;
      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 5:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setCriteria(value);
      break;
    case 6:
      var value = new proto.Mysqlx.Crud.Limit;
      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);
      msg.setLimit(value);
      break;
    case 7:
      var value = new proto.Mysqlx.Crud.Order;
      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    case 8:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.addGrouping(value);
      break;
    case 9:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setGroupingCriteria(value);
      break;
    case 12:
      var value = /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (reader.readEnum());
      msg.setLocking(value);
      break;
    case 13:
      var value = /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (reader.readEnum());
      msg.setLockingOptions(value);
      break;
    case 14:
      var value = new proto.Mysqlx.Crud.LimitExpr;
      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);
      msg.setLimitExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Find.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Find.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Find} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Find.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getProjectionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Mysqlx.Crud.Projection.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getCriteria();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Mysqlx.Crud.Order.serializeBinaryToWriter
    );
  }
  f = message.getGroupingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = message.getGroupingCriteria();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getLimitExpr();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Mysqlx.Crud.Find.RowLock = {
  SHARED_LOCK: 1,
  EXCLUSIVE_LOCK: 2
};

/**
 * @enum {number}
 */
proto.Mysqlx.Crud.Find.RowLockOptions = {
  NOWAIT: 1,
  SKIP_LOCKED: 2
};

/**
 * required Collection collection = 2;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Find.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DataModel data_model = 3;
 * @return {!proto.Mysqlx.Crud.DataModel}
 */
proto.Mysqlx.Crud.Find.prototype.getDataModel = function() {
  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.DataModel} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.setDataModel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearDataModel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasDataModel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Projection projection = 4;
 * @return {!Array<!proto.Mysqlx.Crud.Projection>}
 */
proto.Mysqlx.Crud.Find.prototype.getProjectionList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Projection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Projection, 4));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Projection>} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setProjectionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Projection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Projection}
 */
proto.Mysqlx.Crud.Find.prototype.addProjection = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Projection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearProjectionList = function() {
  return this.setProjectionList([]);
};


/**
 * repeated Mysqlx.Datatypes.Scalar args = 11;
 * @return {!Array<!proto.Mysqlx.Datatypes.Scalar>}
 */
proto.Mysqlx.Crud.Find.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.Mysqlx.Datatypes.Scalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 11));
};


/**
 * @param {!Array<!proto.Mysqlx.Datatypes.Scalar>} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Datatypes.Scalar}
 */
proto.Mysqlx.Crud.Find.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional Mysqlx.Expr.Expr criteria = 5;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Find.prototype.getCriteria = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 5));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setCriteria = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearCriteria = function() {
  return this.setCriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasCriteria = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Limit limit = 6;
 * @return {?proto.Mysqlx.Crud.Limit}
 */
proto.Mysqlx.Crud.Find.prototype.getLimit = function() {
  return /** @type{?proto.Mysqlx.Crud.Limit} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 6));
};


/**
 * @param {?proto.Mysqlx.Crud.Limit|undefined} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setLimit = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearLimit = function() {
  return this.setLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Order order = 7;
 * @return {!Array<!proto.Mysqlx.Crud.Order>}
 */
proto.Mysqlx.Crud.Find.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 7));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Order>} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setOrderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Order}
 */
proto.Mysqlx.Crud.Find.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};


/**
 * repeated Mysqlx.Expr.Expr grouping = 8;
 * @return {!Array<!proto.Mysqlx.Expr.Expr>}
 */
proto.Mysqlx.Crud.Find.prototype.getGroupingList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 8));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Expr>} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setGroupingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Find.prototype.addGrouping = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Expr.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearGroupingList = function() {
  return this.setGroupingList([]);
};


/**
 * optional Mysqlx.Expr.Expr grouping_criteria = 9;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Find.prototype.getGroupingCriteria = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 9));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setGroupingCriteria = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearGroupingCriteria = function() {
  return this.setGroupingCriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasGroupingCriteria = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RowLock locking = 12;
 * @return {!proto.Mysqlx.Crud.Find.RowLock}
 */
proto.Mysqlx.Crud.Find.prototype.getLocking = function() {
  return /** @type {!proto.Mysqlx.Crud.Find.RowLock} */ (jspb.Message.getFieldWithDefault(this, 12, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Find.RowLock} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.setLocking = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearLocking = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasLocking = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RowLockOptions locking_options = 13;
 * @return {!proto.Mysqlx.Crud.Find.RowLockOptions}
 */
proto.Mysqlx.Crud.Find.prototype.getLockingOptions = function() {
  return /** @type {!proto.Mysqlx.Crud.Find.RowLockOptions} */ (jspb.Message.getFieldWithDefault(this, 13, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Find.RowLockOptions} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.setLockingOptions = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearLockingOptions = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasLockingOptions = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional LimitExpr limit_expr = 14;
 * @return {?proto.Mysqlx.Crud.LimitExpr}
 */
proto.Mysqlx.Crud.Find.prototype.getLimitExpr = function() {
  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 14));
};


/**
 * @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value
 * @return {!proto.Mysqlx.Crud.Find} returns this
*/
proto.Mysqlx.Crud.Find.prototype.setLimitExpr = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Find} returns this
 */
proto.Mysqlx.Crud.Find.prototype.clearLimitExpr = function() {
  return this.setLimitExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Find.prototype.hasLimitExpr = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Insert.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Insert.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Insert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Insert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Insert.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    dataModel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    projectionList: jspb.Message.toObjectList(msg.getProjectionList(),
    proto.Mysqlx.Crud.Column.toObject, includeInstance),
    rowList: jspb.Message.toObjectList(msg.getRowList(),
    proto.Mysqlx.Crud.Insert.TypedRow.toObject, includeInstance),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),
    upsert: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Insert}
 */
proto.Mysqlx.Crud.Insert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Insert;
  return proto.Mysqlx.Crud.Insert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Insert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Insert}
 */
proto.Mysqlx.Crud.Insert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 3:
      var value = new proto.Mysqlx.Crud.Column;
      reader.readMessage(value,proto.Mysqlx.Crud.Column.deserializeBinaryFromReader);
      msg.addProjection(value);
      break;
    case 4:
      var value = new proto.Mysqlx.Crud.Insert.TypedRow;
      reader.readMessage(value,proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader);
      msg.addRow(value);
      break;
    case 5:
      var value = new mysqlx_datatypes_pb.Scalar;
      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpsert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Insert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Insert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Insert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Insert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProjectionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Mysqlx.Crud.Column.serializeBinaryToWriter
    );
  }
  f = message.getRowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Insert.TypedRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Insert.TypedRow.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Insert.TypedRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Insert.TypedRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    mysqlx_expr_pb.Expr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Insert.TypedRow}
 */
proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Insert.TypedRow;
  return proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Insert.TypedRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Insert.TypedRow}
 */
proto.Mysqlx.Crud.Insert.TypedRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Insert.TypedRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Insert.TypedRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Insert.TypedRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Mysqlx.Expr.Expr field = 1;
 * @return {!Array<!proto.Mysqlx.Expr.Expr>}
 */
proto.Mysqlx.Crud.Insert.TypedRow.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_expr_pb.Expr, 1));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Expr>} value
 * @return {!proto.Mysqlx.Crud.Insert.TypedRow} returns this
*/
proto.Mysqlx.Crud.Insert.TypedRow.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Insert.TypedRow.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Insert.TypedRow} returns this
 */
proto.Mysqlx.Crud.Insert.TypedRow.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};


/**
 * required Collection collection = 1;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Insert.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
*/
proto.Mysqlx.Crud.Insert.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Insert.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataModel data_model = 2;
 * @return {!proto.Mysqlx.Crud.DataModel}
 */
proto.Mysqlx.Crud.Insert.prototype.getDataModel = function() {
  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.DataModel} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.setDataModel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearDataModel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Insert.prototype.hasDataModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Column projection = 3;
 * @return {!Array<!proto.Mysqlx.Crud.Column>}
 */
proto.Mysqlx.Crud.Insert.prototype.getProjectionList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Column, 3));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Column>} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
*/
proto.Mysqlx.Crud.Insert.prototype.setProjectionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Column}
 */
proto.Mysqlx.Crud.Insert.prototype.addProjection = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Mysqlx.Crud.Column, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearProjectionList = function() {
  return this.setProjectionList([]);
};


/**
 * repeated TypedRow row = 4;
 * @return {!Array<!proto.Mysqlx.Crud.Insert.TypedRow>}
 */
proto.Mysqlx.Crud.Insert.prototype.getRowList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Insert.TypedRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Insert.TypedRow, 4));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Insert.TypedRow>} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
*/
proto.Mysqlx.Crud.Insert.prototype.setRowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Insert.TypedRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Insert.TypedRow}
 */
proto.Mysqlx.Crud.Insert.prototype.addRow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Mysqlx.Crud.Insert.TypedRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearRowList = function() {
  return this.setRowList([]);
};


/**
 * repeated Mysqlx.Datatypes.Scalar args = 5;
 * @return {!Array<!proto.Mysqlx.Datatypes.Scalar>}
 */
proto.Mysqlx.Crud.Insert.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.Mysqlx.Datatypes.Scalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 5));
};


/**
 * @param {!Array<!proto.Mysqlx.Datatypes.Scalar>} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
*/
proto.Mysqlx.Crud.Insert.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Datatypes.Scalar}
 */
proto.Mysqlx.Crud.Insert.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional bool upsert = 6;
 * @return {boolean}
 */
proto.Mysqlx.Crud.Insert.prototype.getUpsert = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.setUpsert = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Insert} returns this
 */
proto.Mysqlx.Crud.Insert.prototype.clearUpsert = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Insert.prototype.hasUpsert = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Update.repeatedFields_ = [6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    dataModel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.Mysqlx.Crud.Order.toObject, includeInstance),
    operationList: jspb.Message.toObjectList(msg.getOperationList(),
    proto.Mysqlx.Crud.UpdateOperation.toObject, includeInstance),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),
    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Update}
 */
proto.Mysqlx.Crud.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Update;
  return proto.Mysqlx.Crud.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Update}
 */
proto.Mysqlx.Crud.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 4:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setCriteria(value);
      break;
    case 5:
      var value = new proto.Mysqlx.Crud.Limit;
      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);
      msg.setLimit(value);
      break;
    case 6:
      var value = new proto.Mysqlx.Crud.Order;
      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    case 7:
      var value = new proto.Mysqlx.Crud.UpdateOperation;
      reader.readMessage(value,proto.Mysqlx.Crud.UpdateOperation.deserializeBinaryFromReader);
      msg.addOperation(value);
      break;
    case 8:
      var value = new mysqlx_datatypes_pb.Scalar;
      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 9:
      var value = new proto.Mysqlx.Crud.LimitExpr;
      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);
      msg.setLimitExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCriteria();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Mysqlx.Crud.Order.serializeBinaryToWriter
    );
  }
  f = message.getOperationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Mysqlx.Crud.UpdateOperation.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getLimitExpr();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter
    );
  }
};


/**
 * required Collection collection = 2;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Update.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Update.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DataModel data_model = 3;
 * @return {!proto.Mysqlx.Crud.DataModel}
 */
proto.Mysqlx.Crud.Update.prototype.getDataModel = function() {
  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.DataModel} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.setDataModel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearDataModel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Update.prototype.hasDataModel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Mysqlx.Expr.Expr criteria = 4;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Update.prototype.getCriteria = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 4));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setCriteria = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearCriteria = function() {
  return this.setCriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Update.prototype.hasCriteria = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Limit limit = 5;
 * @return {?proto.Mysqlx.Crud.Limit}
 */
proto.Mysqlx.Crud.Update.prototype.getLimit = function() {
  return /** @type{?proto.Mysqlx.Crud.Limit} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 5));
};


/**
 * @param {?proto.Mysqlx.Crud.Limit|undefined} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setLimit = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearLimit = function() {
  return this.setLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Update.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Order order = 6;
 * @return {!Array<!proto.Mysqlx.Crud.Order>}
 */
proto.Mysqlx.Crud.Update.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 6));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Order>} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setOrderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Order}
 */
proto.Mysqlx.Crud.Update.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Crud.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};


/**
 * repeated UpdateOperation operation = 7;
 * @return {!Array<!proto.Mysqlx.Crud.UpdateOperation>}
 */
proto.Mysqlx.Crud.Update.prototype.getOperationList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.UpdateOperation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.UpdateOperation, 7));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.UpdateOperation>} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setOperationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Mysqlx.Crud.UpdateOperation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.UpdateOperation}
 */
proto.Mysqlx.Crud.Update.prototype.addOperation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Mysqlx.Crud.UpdateOperation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearOperationList = function() {
  return this.setOperationList([]);
};


/**
 * repeated Mysqlx.Datatypes.Scalar args = 8;
 * @return {!Array<!proto.Mysqlx.Datatypes.Scalar>}
 */
proto.Mysqlx.Crud.Update.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.Mysqlx.Datatypes.Scalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 8));
};


/**
 * @param {!Array<!proto.Mysqlx.Datatypes.Scalar>} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Datatypes.Scalar}
 */
proto.Mysqlx.Crud.Update.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional LimitExpr limit_expr = 9;
 * @return {?proto.Mysqlx.Crud.LimitExpr}
 */
proto.Mysqlx.Crud.Update.prototype.getLimitExpr = function() {
  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 9));
};


/**
 * @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value
 * @return {!proto.Mysqlx.Crud.Update} returns this
*/
proto.Mysqlx.Crud.Update.prototype.setLimitExpr = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Update} returns this
 */
proto.Mysqlx.Crud.Update.prototype.clearLimitExpr = function() {
  return this.setLimitExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Update.prototype.hasLimitExpr = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.Delete.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    dataModel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    criteria: (f = msg.getCriteria()) && mysqlx_expr_pb.Expr.toObject(includeInstance, f),
    limit: (f = msg.getLimit()) && proto.Mysqlx.Crud.Limit.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.Mysqlx.Crud.Order.toObject, includeInstance),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    mysqlx_datatypes_pb.Scalar.toObject, includeInstance),
    limitExpr: (f = msg.getLimitExpr()) && proto.Mysqlx.Crud.LimitExpr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.Delete}
 */
proto.Mysqlx.Crud.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.Delete;
  return proto.Mysqlx.Crud.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.Delete}
 */
proto.Mysqlx.Crud.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {!proto.Mysqlx.Crud.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 3:
      var value = new mysqlx_expr_pb.Expr;
      reader.readMessage(value,mysqlx_expr_pb.Expr.deserializeBinaryFromReader);
      msg.setCriteria(value);
      break;
    case 4:
      var value = new proto.Mysqlx.Crud.Limit;
      reader.readMessage(value,proto.Mysqlx.Crud.Limit.deserializeBinaryFromReader);
      msg.setLimit(value);
      break;
    case 5:
      var value = new proto.Mysqlx.Crud.Order;
      reader.readMessage(value,proto.Mysqlx.Crud.Order.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    case 6:
      var value = new mysqlx_datatypes_pb.Scalar;
      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 7:
      var value = new proto.Mysqlx.Crud.LimitExpr;
      reader.readMessage(value,proto.Mysqlx.Crud.LimitExpr.deserializeBinaryFromReader);
      msg.setLimitExpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCriteria();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      mysqlx_expr_pb.Expr.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Mysqlx.Crud.Limit.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Mysqlx.Crud.Order.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getLimitExpr();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Mysqlx.Crud.LimitExpr.serializeBinaryToWriter
    );
  }
};


/**
 * required Collection collection = 1;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.Delete.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Delete.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataModel data_model = 2;
 * @return {!proto.Mysqlx.Crud.DataModel}
 */
proto.Mysqlx.Crud.Delete.prototype.getDataModel = function() {
  return /** @type {!proto.Mysqlx.Crud.DataModel} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.DataModel} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.setDataModel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearDataModel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Delete.prototype.hasDataModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Mysqlx.Expr.Expr criteria = 3;
 * @return {?proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Crud.Delete.prototype.getCriteria = function() {
  return /** @type{?proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, mysqlx_expr_pb.Expr, 3));
};


/**
 * @param {?proto.Mysqlx.Expr.Expr|undefined} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setCriteria = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearCriteria = function() {
  return this.setCriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Delete.prototype.hasCriteria = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Limit limit = 4;
 * @return {?proto.Mysqlx.Crud.Limit}
 */
proto.Mysqlx.Crud.Delete.prototype.getLimit = function() {
  return /** @type{?proto.Mysqlx.Crud.Limit} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Limit, 4));
};


/**
 * @param {?proto.Mysqlx.Crud.Limit|undefined} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setLimit = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearLimit = function() {
  return this.setLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Delete.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Order order = 5;
 * @return {!Array<!proto.Mysqlx.Crud.Order>}
 */
proto.Mysqlx.Crud.Delete.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.Mysqlx.Crud.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Crud.Order, 5));
};


/**
 * @param {!Array<!proto.Mysqlx.Crud.Order>} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setOrderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Mysqlx.Crud.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.Order}
 */
proto.Mysqlx.Crud.Delete.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Mysqlx.Crud.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};


/**
 * repeated Mysqlx.Datatypes.Scalar args = 6;
 * @return {!Array<!proto.Mysqlx.Datatypes.Scalar>}
 */
proto.Mysqlx.Crud.Delete.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.Mysqlx.Datatypes.Scalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, mysqlx_datatypes_pb.Scalar, 6));
};


/**
 * @param {!Array<!proto.Mysqlx.Datatypes.Scalar>} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Mysqlx.Datatypes.Scalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Datatypes.Scalar}
 */
proto.Mysqlx.Crud.Delete.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Mysqlx.Datatypes.Scalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional LimitExpr limit_expr = 7;
 * @return {?proto.Mysqlx.Crud.LimitExpr}
 */
proto.Mysqlx.Crud.Delete.prototype.getLimitExpr = function() {
  return /** @type{?proto.Mysqlx.Crud.LimitExpr} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.LimitExpr, 7));
};


/**
 * @param {?proto.Mysqlx.Crud.LimitExpr|undefined} value
 * @return {!proto.Mysqlx.Crud.Delete} returns this
*/
proto.Mysqlx.Crud.Delete.prototype.setLimitExpr = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.Delete} returns this
 */
proto.Mysqlx.Crud.Delete.prototype.clearLimitExpr = function() {
  return this.setLimitExpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.Delete.prototype.hasLimitExpr = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.CreateView.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.CreateView.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.CreateView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.CreateView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.CreateView.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    definer: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    algorithm: jspb.Message.getFieldWithDefault(msg, 3, 1),
    security: jspb.Message.getFieldWithDefault(msg, 4, 2),
    check: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    columnList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f),
    replaceExisting: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.CreateView}
 */
proto.Mysqlx.Crud.CreateView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.CreateView;
  return proto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.CreateView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.CreateView}
 */
proto.Mysqlx.Crud.CreateView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefiner(value);
      break;
    case 3:
      var value = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 4:
      var value = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (reader.readEnum());
      msg.setSecurity(value);
      break;
    case 5:
      var value = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (reader.readEnum());
      msg.setCheck(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumn(value);
      break;
    case 7:
      var value = new proto.Mysqlx.Crud.Find;
      reader.readMessage(value,proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);
      msg.setStmt(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplaceExisting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.CreateView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.CreateView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.CreateView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.CreateView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getColumnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getStmt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Mysqlx.Crud.Find.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * required Collection collection = 1;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.CreateView.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
*/
proto.Mysqlx.Crud.CreateView.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string definer = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.CreateView.prototype.getDefiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setDefiner = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearDefiner = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasDefiner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ViewAlgorithm algorithm = 3;
 * @return {!proto.Mysqlx.Crud.ViewAlgorithm}
 */
proto.Mysqlx.Crud.CreateView.prototype.getAlgorithm = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewAlgorithm} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setAlgorithm = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearAlgorithm = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasAlgorithm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ViewSqlSecurity security = 4;
 * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}
 */
proto.Mysqlx.Crud.CreateView.prototype.getSecurity = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getFieldWithDefault(this, 4, 2));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setSecurity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearSecurity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasSecurity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ViewCheckOption check = 5;
 * @return {!proto.Mysqlx.Crud.ViewCheckOption}
 */
proto.Mysqlx.Crud.CreateView.prototype.getCheck = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewCheckOption} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setCheck = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearCheck = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string column = 6;
 * @return {!Array<string>}
 */
proto.Mysqlx.Crud.CreateView.prototype.getColumnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setColumnList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.addColumn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearColumnList = function() {
  return this.setColumnList([]);
};


/**
 * required Find stmt = 7;
 * @return {!proto.Mysqlx.Crud.Find}
 */
proto.Mysqlx.Crud.CreateView.prototype.getStmt = function() {
  return /** @type{!proto.Mysqlx.Crud.Find} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Find} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
*/
proto.Mysqlx.Crud.CreateView.prototype.setStmt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearStmt = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasStmt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool replace_existing = 8;
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.getReplaceExisting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.setReplaceExisting = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.CreateView} returns this
 */
proto.Mysqlx.Crud.CreateView.prototype.clearReplaceExisting = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.CreateView.prototype.hasReplaceExisting = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Crud.ModifyView.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.ModifyView.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.ModifyView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.ModifyView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.ModifyView.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    definer: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    algorithm: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    security: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    check: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    columnList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    stmt: (f = msg.getStmt()) && proto.Mysqlx.Crud.Find.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.ModifyView}
 */
proto.Mysqlx.Crud.ModifyView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.ModifyView;
  return proto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.ModifyView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.ModifyView}
 */
proto.Mysqlx.Crud.ModifyView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefiner(value);
      break;
    case 3:
      var value = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 4:
      var value = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (reader.readEnum());
      msg.setSecurity(value);
      break;
    case 5:
      var value = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (reader.readEnum());
      msg.setCheck(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumn(value);
      break;
    case 7:
      var value = new proto.Mysqlx.Crud.Find;
      reader.readMessage(value,proto.Mysqlx.Crud.Find.deserializeBinaryFromReader);
      msg.setStmt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.ModifyView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.ModifyView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.ModifyView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getColumnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getStmt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Mysqlx.Crud.Find.serializeBinaryToWriter
    );
  }
};


/**
 * required Collection collection = 1;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
*/
proto.Mysqlx.Crud.ModifyView.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string definer = 2;
 * @return {string}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getDefiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.setDefiner = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearDefiner = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasDefiner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ViewAlgorithm algorithm = 3;
 * @return {!proto.Mysqlx.Crud.ViewAlgorithm}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getAlgorithm = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewAlgorithm} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.setAlgorithm = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearAlgorithm = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasAlgorithm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ViewSqlSecurity security = 4;
 * @return {!proto.Mysqlx.Crud.ViewSqlSecurity}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getSecurity = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewSqlSecurity} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewSqlSecurity} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.setSecurity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearSecurity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasSecurity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ViewCheckOption check = 5;
 * @return {!proto.Mysqlx.Crud.ViewCheckOption}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getCheck = function() {
  return /** @type {!proto.Mysqlx.Crud.ViewCheckOption} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.ViewCheckOption} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.setCheck = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearCheck = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string column = 6;
 * @return {!Array<string>}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getColumnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.setColumnList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.addColumn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearColumnList = function() {
  return this.setColumnList([]);
};


/**
 * optional Find stmt = 7;
 * @return {?proto.Mysqlx.Crud.Find}
 */
proto.Mysqlx.Crud.ModifyView.prototype.getStmt = function() {
  return /** @type{?proto.Mysqlx.Crud.Find} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Find, 7));
};


/**
 * @param {?proto.Mysqlx.Crud.Find|undefined} value
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
*/
proto.Mysqlx.Crud.ModifyView.prototype.setStmt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Crud.ModifyView} returns this
 */
proto.Mysqlx.Crud.ModifyView.prototype.clearStmt = function() {
  return this.setStmt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.ModifyView.prototype.hasStmt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Crud.DropView.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Crud.DropView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Crud.DropView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.DropView.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.Mysqlx.Crud.Collection.toObject(includeInstance, f),
    ifExists: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Crud.DropView}
 */
proto.Mysqlx.Crud.DropView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Crud.DropView;
  return proto.Mysqlx.Crud.DropView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Crud.DropView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Crud.DropView}
 */
proto.Mysqlx.Crud.DropView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Crud.Collection;
      reader.readMessage(value,proto.Mysqlx.Crud.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIfExists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Crud.DropView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Crud.DropView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Crud.DropView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Crud.DropView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Crud.Collection.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required Collection collection = 1;
 * @return {!proto.Mysqlx.Crud.Collection}
 */
proto.Mysqlx.Crud.DropView.prototype.getCollection = function() {
  return /** @type{!proto.Mysqlx.Crud.Collection} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Crud.Collection, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Crud.Collection} value
 * @return {!proto.Mysqlx.Crud.DropView} returns this
*/
proto.Mysqlx.Crud.DropView.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.DropView} returns this
 */
proto.Mysqlx.Crud.DropView.prototype.clearCollection = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.DropView.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool if_exists = 2;
 * @return {boolean}
 */
proto.Mysqlx.Crud.DropView.prototype.getIfExists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Mysqlx.Crud.DropView} returns this
 */
proto.Mysqlx.Crud.DropView.prototype.setIfExists = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Crud.DropView} returns this
 */
proto.Mysqlx.Crud.DropView.prototype.clearIfExists = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Crud.DropView.prototype.hasIfExists = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.Mysqlx.Crud.DataModel = {
  DOCUMENT: 1,
  TABLE: 2
};

/**
 * @enum {number}
 */
proto.Mysqlx.Crud.ViewAlgorithm = {
  UNDEFINED: 1,
  MERGE: 2,
  TEMPTABLE: 3
};

/**
 * @enum {number}
 */
proto.Mysqlx.Crud.ViewSqlSecurity = {
  INVOKER: 1,
  DEFINER: 2
};

/**
 * @enum {number}
 */
proto.Mysqlx.Crud.ViewCheckOption = {
  LOCAL: 1,
  CASCADED: 2
};

goog.object.extend(exports, proto.Mysqlx.Crud);
