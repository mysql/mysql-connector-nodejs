/*
 * Copyright (c) 2017, 2022, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0, as
 * published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms,
 * as designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an
 * additional permission to link the program and your derivative works
 * with the separately licensed software that they have included with
 * MySQL.
 *
 * Without limiting anything contained in the foregoing, this file,
 * which is part of MySQL Connector/Node.js, is also subject to the
 * Universal FOSS Exception, version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

// source: mysqlx_expr.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var mysqlx_datatypes_pb = require('./mysqlx_datatypes_pb.js');
goog.object.extend(proto, mysqlx_datatypes_pb);
goog.exportSymbol('proto.Mysqlx.Expr.Array', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.ColumnIdentifier', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.DocumentPathItem', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.DocumentPathItem.Type', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Expr', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Expr.Type', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.FunctionCall', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Identifier', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Object', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Object.ObjectField', null, global);
goog.exportSymbol('proto.Mysqlx.Expr.Operator', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Expr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Expr.Expr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Expr.displayName = 'proto.Mysqlx.Expr.Expr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Expr.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Identifier.displayName = 'proto.Mysqlx.Expr.Identifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.DocumentPathItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Expr.DocumentPathItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.DocumentPathItem.displayName = 'proto.Mysqlx.Expr.DocumentPathItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.ColumnIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expr.ColumnIdentifier.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Expr.ColumnIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.ColumnIdentifier.displayName = 'proto.Mysqlx.Expr.ColumnIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.FunctionCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expr.FunctionCall.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Expr.FunctionCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.FunctionCall.displayName = 'proto.Mysqlx.Expr.FunctionCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Operator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expr.Operator.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Expr.Operator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Operator.displayName = 'proto.Mysqlx.Expr.Operator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expr.Object.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Expr.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Object.displayName = 'proto.Mysqlx.Expr.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Object.ObjectField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Mysqlx.Expr.Object.ObjectField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Object.ObjectField.displayName = 'proto.Mysqlx.Expr.Object.ObjectField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mysqlx.Expr.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mysqlx.Expr.Array.repeatedFields_, null);
};
goog.inherits(proto.Mysqlx.Expr.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mysqlx.Expr.Array.displayName = 'proto.Mysqlx.Expr.Array';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Expr.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Expr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Expr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Expr.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    identifier: (f = msg.getIdentifier()) && proto.Mysqlx.Expr.ColumnIdentifier.toObject(includeInstance, f),
    variable: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    literal: (f = msg.getLiteral()) && mysqlx_datatypes_pb.Scalar.toObject(includeInstance, f),
    functionCall: (f = msg.getFunctionCall()) && proto.Mysqlx.Expr.FunctionCall.toObject(includeInstance, f),
    operator: (f = msg.getOperator()) && proto.Mysqlx.Expr.Operator.toObject(includeInstance, f),
    position: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    object: (f = msg.getObject()) && proto.Mysqlx.Expr.Object.toObject(includeInstance, f),
    array: (f = msg.getArray()) && proto.Mysqlx.Expr.Array.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.Expr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Expr;
  return proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Expr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Mysqlx.Expr.Expr.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Mysqlx.Expr.ColumnIdentifier;
      reader.readMessage(value,proto.Mysqlx.Expr.ColumnIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 4:
      var value = new mysqlx_datatypes_pb.Scalar;
      reader.readMessage(value,mysqlx_datatypes_pb.Scalar.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 5:
      var value = new proto.Mysqlx.Expr.FunctionCall;
      reader.readMessage(value,proto.Mysqlx.Expr.FunctionCall.deserializeBinaryFromReader);
      msg.setFunctionCall(value);
      break;
    case 6:
      var value = new proto.Mysqlx.Expr.Operator;
      reader.readMessage(value,proto.Mysqlx.Expr.Operator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 8:
      var value = new proto.Mysqlx.Expr.Object;
      reader.readMessage(value,proto.Mysqlx.Expr.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 9:
      var value = new proto.Mysqlx.Expr.Array;
      reader.readMessage(value,proto.Mysqlx.Expr.Array.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Expr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Expr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Expr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Expr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Mysqlx.Expr.Expr.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Mysqlx.Expr.ColumnIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      mysqlx_datatypes_pb.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getFunctionCall();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Mysqlx.Expr.FunctionCall.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Mysqlx.Expr.Operator.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Mysqlx.Expr.Object.serializeBinaryToWriter
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Mysqlx.Expr.Array.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Mysqlx.Expr.Expr.Type = {
  IDENT: 1,
  LITERAL: 2,
  VARIABLE: 3,
  FUNC_CALL: 4,
  OPERATOR: 5,
  PLACEHOLDER: 6,
  OBJECT: 7,
  ARRAY: 8
};

/**
 * required Type type = 1;
 * @return {!proto.Mysqlx.Expr.Expr.Type}
 */
proto.Mysqlx.Expr.Expr.prototype.getType = function() {
  return /** @type {!proto.Mysqlx.Expr.Expr.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Expr.Type} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ColumnIdentifier identifier = 2;
 * @return {?proto.Mysqlx.Expr.ColumnIdentifier}
 */
proto.Mysqlx.Expr.Expr.prototype.getIdentifier = function() {
  return /** @type{?proto.Mysqlx.Expr.ColumnIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.ColumnIdentifier, 2));
};


/**
 * @param {?proto.Mysqlx.Expr.ColumnIdentifier|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string variable = 3;
 * @return {string}
 */
proto.Mysqlx.Expr.Expr.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.setVariable = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearVariable = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Mysqlx.Datatypes.Scalar literal = 4;
 * @return {?proto.Mysqlx.Datatypes.Scalar}
 */
proto.Mysqlx.Expr.Expr.prototype.getLiteral = function() {
  return /** @type{?proto.Mysqlx.Datatypes.Scalar} */ (
    jspb.Message.getWrapperField(this, mysqlx_datatypes_pb.Scalar, 4));
};


/**
 * @param {?proto.Mysqlx.Datatypes.Scalar|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setLiteral = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearLiteral = function() {
  return this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FunctionCall function_call = 5;
 * @return {?proto.Mysqlx.Expr.FunctionCall}
 */
proto.Mysqlx.Expr.Expr.prototype.getFunctionCall = function() {
  return /** @type{?proto.Mysqlx.Expr.FunctionCall} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.FunctionCall, 5));
};


/**
 * @param {?proto.Mysqlx.Expr.FunctionCall|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setFunctionCall = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearFunctionCall = function() {
  return this.setFunctionCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasFunctionCall = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Operator operator = 6;
 * @return {?proto.Mysqlx.Expr.Operator}
 */
proto.Mysqlx.Expr.Expr.prototype.getOperator = function() {
  return /** @type{?proto.Mysqlx.Expr.Operator} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.Operator, 6));
};


/**
 * @param {?proto.Mysqlx.Expr.Operator|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setOperator = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearOperator = function() {
  return this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 position = 7;
 * @return {number}
 */
proto.Mysqlx.Expr.Expr.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Object object = 8;
 * @return {?proto.Mysqlx.Expr.Object}
 */
proto.Mysqlx.Expr.Expr.prototype.getObject = function() {
  return /** @type{?proto.Mysqlx.Expr.Object} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.Object, 8));
};


/**
 * @param {?proto.Mysqlx.Expr.Object|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasObject = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Array array = 9;
 * @return {?proto.Mysqlx.Expr.Array}
 */
proto.Mysqlx.Expr.Expr.prototype.getArray = function() {
  return /** @type{?proto.Mysqlx.Expr.Array} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.Array, 9));
};


/**
 * @param {?proto.Mysqlx.Expr.Array|undefined} value
 * @return {!proto.Mysqlx.Expr.Expr} returns this
*/
proto.Mysqlx.Expr.Expr.prototype.setArray = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mysqlx.Expr.Expr} returns this
 */
proto.Mysqlx.Expr.Expr.prototype.clearArray = function() {
  return this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Expr.prototype.hasArray = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    schemaName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Identifier}
 */
proto.Mysqlx.Expr.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Identifier;
  return proto.Mysqlx.Expr.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Identifier}
 */
proto.Mysqlx.Expr.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Mysqlx.Expr.Identifier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.Identifier} returns this
 */
proto.Mysqlx.Expr.Identifier.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Identifier} returns this
 */
proto.Mysqlx.Expr.Identifier.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Identifier.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string schema_name = 2;
 * @return {string}
 */
proto.Mysqlx.Expr.Identifier.prototype.getSchemaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.Identifier} returns this
 */
proto.Mysqlx.Expr.Identifier.prototype.setSchemaName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Identifier} returns this
 */
proto.Mysqlx.Expr.Identifier.prototype.clearSchemaName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Identifier.prototype.hasSchemaName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.DocumentPathItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.DocumentPathItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.DocumentPathItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    index: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.DocumentPathItem}
 */
proto.Mysqlx.Expr.DocumentPathItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.DocumentPathItem;
  return proto.Mysqlx.Expr.DocumentPathItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.DocumentPathItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.DocumentPathItem}
 */
proto.Mysqlx.Expr.DocumentPathItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Mysqlx.Expr.DocumentPathItem.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.DocumentPathItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.DocumentPathItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.DocumentPathItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Mysqlx.Expr.DocumentPathItem.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Mysqlx.Expr.DocumentPathItem.Type = {
  MEMBER: 1,
  MEMBER_ASTERISK: 2,
  ARRAY_INDEX: 3,
  ARRAY_INDEX_ASTERISK: 4,
  DOUBLE_ASTERISK: 5
};

/**
 * required Type type = 1;
 * @return {!proto.Mysqlx.Expr.DocumentPathItem.Type}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.getType = function() {
  return /** @type {!proto.Mysqlx.Expr.DocumentPathItem.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.DocumentPathItem.Type} value
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.setIndex = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.DocumentPathItem} returns this
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.clearIndex = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.DocumentPathItem.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Expr.ColumnIdentifier.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.ColumnIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.ColumnIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.ColumnIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentPathList: jspb.Message.toObjectList(msg.getDocumentPathList(),
    proto.Mysqlx.Expr.DocumentPathItem.toObject, includeInstance),
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    tableName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    schemaName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier}
 */
proto.Mysqlx.Expr.ColumnIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.ColumnIdentifier;
  return proto.Mysqlx.Expr.ColumnIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.ColumnIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier}
 */
proto.Mysqlx.Expr.ColumnIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Expr.DocumentPathItem;
      reader.readMessage(value,proto.Mysqlx.Expr.DocumentPathItem.deserializeBinaryFromReader);
      msg.addDocumentPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.ColumnIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.ColumnIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.ColumnIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Mysqlx.Expr.DocumentPathItem.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated DocumentPathItem document_path = 1;
 * @return {!Array<!proto.Mysqlx.Expr.DocumentPathItem>}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.getDocumentPathList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.DocumentPathItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expr.DocumentPathItem, 1));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.DocumentPathItem>} value
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
*/
proto.Mysqlx.Expr.ColumnIdentifier.prototype.setDocumentPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Mysqlx.Expr.DocumentPathItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.DocumentPathItem}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.addDocumentPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.DocumentPathItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.clearDocumentPathList = function() {
  return this.setDocumentPathList([]);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string table_name = 3;
 * @return {string}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.setTableName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.clearTableName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.hasTableName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string schema_name = 4;
 * @return {string}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.getSchemaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.setSchemaName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.ColumnIdentifier} returns this
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.clearSchemaName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.ColumnIdentifier.prototype.hasSchemaName = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Expr.FunctionCall.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.FunctionCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.FunctionCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.FunctionCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.Mysqlx.Expr.Identifier.toObject(includeInstance, f),
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.Mysqlx.Expr.Expr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.FunctionCall}
 */
proto.Mysqlx.Expr.FunctionCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.FunctionCall;
  return proto.Mysqlx.Expr.FunctionCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.FunctionCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.FunctionCall}
 */
proto.Mysqlx.Expr.FunctionCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Expr.Identifier;
      reader.readMessage(value,proto.Mysqlx.Expr.Identifier.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Mysqlx.Expr.Expr;
      reader.readMessage(value,proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.FunctionCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.FunctionCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.FunctionCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Mysqlx.Expr.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Mysqlx.Expr.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * required Identifier name = 1;
 * @return {!proto.Mysqlx.Expr.Identifier}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.getName = function() {
  return /** @type{!proto.Mysqlx.Expr.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.Identifier, 1, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Identifier} value
 * @return {!proto.Mysqlx.Expr.FunctionCall} returns this
*/
proto.Mysqlx.Expr.FunctionCall.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.FunctionCall} returns this
 */
proto.Mysqlx.Expr.FunctionCall.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Expr param = 2;
 * @return {!Array<!proto.Mysqlx.Expr.Expr>}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.getParamList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expr.Expr, 2));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Expr>} value
 * @return {!proto.Mysqlx.Expr.FunctionCall} returns this
*/
proto.Mysqlx.Expr.FunctionCall.prototype.setParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.FunctionCall.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Expr.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Expr.FunctionCall} returns this
 */
proto.Mysqlx.Expr.FunctionCall.prototype.clearParamList = function() {
  return this.setParamList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Expr.Operator.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Operator.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Operator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Operator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Operator.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.Mysqlx.Expr.Expr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Operator}
 */
proto.Mysqlx.Expr.Operator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Operator;
  return proto.Mysqlx.Expr.Operator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Operator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Operator}
 */
proto.Mysqlx.Expr.Operator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Mysqlx.Expr.Expr;
      reader.readMessage(value,proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Operator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Operator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Operator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Operator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Mysqlx.Expr.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Mysqlx.Expr.Operator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.Operator} returns this
 */
proto.Mysqlx.Expr.Operator.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Operator} returns this
 */
proto.Mysqlx.Expr.Operator.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Operator.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Expr param = 2;
 * @return {!Array<!proto.Mysqlx.Expr.Expr>}
 */
proto.Mysqlx.Expr.Operator.prototype.getParamList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expr.Expr, 2));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Expr>} value
 * @return {!proto.Mysqlx.Expr.Operator} returns this
*/
proto.Mysqlx.Expr.Operator.prototype.setParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.Operator.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mysqlx.Expr.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Expr.Operator} returns this
 */
proto.Mysqlx.Expr.Operator.prototype.clearParamList = function() {
  return this.setParamList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Expr.Object.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    fldList: jspb.Message.toObjectList(msg.getFldList(),
    proto.Mysqlx.Expr.Object.ObjectField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Object}
 */
proto.Mysqlx.Expr.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Object;
  return proto.Mysqlx.Expr.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Object}
 */
proto.Mysqlx.Expr.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Expr.Object.ObjectField;
      reader.readMessage(value,proto.Mysqlx.Expr.Object.ObjectField.deserializeBinaryFromReader);
      msg.addFld(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Mysqlx.Expr.Object.ObjectField.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Object.ObjectField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Object.ObjectField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Object.ObjectField.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = msg.getValue()) && proto.Mysqlx.Expr.Expr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Object.ObjectField}
 */
proto.Mysqlx.Expr.Object.ObjectField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Object.ObjectField;
  return proto.Mysqlx.Expr.Object.ObjectField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Object.ObjectField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Object.ObjectField}
 */
proto.Mysqlx.Expr.Object.ObjectField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.Mysqlx.Expr.Expr;
      reader.readMessage(value,proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Object.ObjectField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Object.ObjectField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Object.ObjectField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Mysqlx.Expr.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Mysqlx.Expr.Object.ObjectField} returns this
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Object.ObjectField} returns this
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Expr value = 2;
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.getValue = function() {
  return /** @type{!proto.Mysqlx.Expr.Expr} */ (
    jspb.Message.getWrapperField(this, proto.Mysqlx.Expr.Expr, 2, 1));
};


/**
 * @param {!proto.Mysqlx.Expr.Expr} value
 * @return {!proto.Mysqlx.Expr.Object.ObjectField} returns this
*/
proto.Mysqlx.Expr.Object.ObjectField.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Mysqlx.Expr.Object.ObjectField} returns this
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mysqlx.Expr.Object.ObjectField.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ObjectField fld = 1;
 * @return {!Array<!proto.Mysqlx.Expr.Object.ObjectField>}
 */
proto.Mysqlx.Expr.Object.prototype.getFldList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Object.ObjectField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expr.Object.ObjectField, 1));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Object.ObjectField>} value
 * @return {!proto.Mysqlx.Expr.Object} returns this
*/
proto.Mysqlx.Expr.Object.prototype.setFldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Object.ObjectField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Object.ObjectField}
 */
proto.Mysqlx.Expr.Object.prototype.addFld = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.Object.ObjectField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Expr.Object} returns this
 */
proto.Mysqlx.Expr.Object.prototype.clearFldList = function() {
  return this.setFldList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mysqlx.Expr.Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mysqlx.Expr.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.Mysqlx.Expr.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mysqlx.Expr.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    proto.Mysqlx.Expr.Expr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mysqlx.Expr.Array}
 */
proto.Mysqlx.Expr.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mysqlx.Expr.Array;
  return proto.Mysqlx.Expr.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mysqlx.Expr.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mysqlx.Expr.Array}
 */
proto.Mysqlx.Expr.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mysqlx.Expr.Expr;
      reader.readMessage(value,proto.Mysqlx.Expr.Expr.deserializeBinaryFromReader);
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mysqlx.Expr.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mysqlx.Expr.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mysqlx.Expr.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mysqlx.Expr.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Mysqlx.Expr.Expr.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Expr value = 1;
 * @return {!Array<!proto.Mysqlx.Expr.Expr>}
 */
proto.Mysqlx.Expr.Array.prototype.getValueList = function() {
  return /** @type{!Array<!proto.Mysqlx.Expr.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mysqlx.Expr.Expr, 1));
};


/**
 * @param {!Array<!proto.Mysqlx.Expr.Expr>} value
 * @return {!proto.Mysqlx.Expr.Array} returns this
*/
proto.Mysqlx.Expr.Array.prototype.setValueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Mysqlx.Expr.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mysqlx.Expr.Expr}
 */
proto.Mysqlx.Expr.Array.prototype.addValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mysqlx.Expr.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mysqlx.Expr.Array} returns this
 */
proto.Mysqlx.Expr.Array.prototype.clearValueList = function() {
  return this.setValueList([]);
};


goog.object.extend(exports, proto.Mysqlx.Expr);
