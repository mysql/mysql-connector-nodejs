/*
 * Copyright (c) 2022, 2023, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0, as
 * published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms,
 * as designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an
 * additional permission to link the program and your derivative works
 * with the separately licensed software that they have included with
 * MySQL.
 *
 * Without limiting anything contained in the foregoing, this file,
 * which is part of MySQL Connector/Node.js, is also subject to the
 * Universal FOSS Exception, version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

import { Scalar } from '../Protocol/Datatypes';
import BaseResult from './BaseResult';
import Column from './Column';

/**
 * Result set type generated by executing relational CRUD operations with
 * `Table.select()`.
 */
interface RowResult extends BaseResult {
    /**
     * Retrieves all rows from the cursor.
     * @returns An array of records which, in turn, are also arrays
     * representing each row in the result set, which contain the values
     * of each column that is part of the projection or aggregation.
     */
    fetchAll: () => Scalar[][]
    /**
     * Retrieves the next row from the cursor.
     * @returns An array representing a row, containing the value of each
     * column that is part of the projection or aggregation.
     */
    fetchOne: () => Scalar[]
    /**
     * Retrieves the list of column instances that are part of the result set
     * metadata.
     * @returns An array of `Column` instances.
     */
    getColumns: () => Column[]
}

export default RowResult;
